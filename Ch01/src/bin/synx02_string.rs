fn main() {
    // –¢–∏–ø String —î —Ç–∏–ø–æ–º vector, –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É—é–≤–∞—Ç–∏ –π–æ–≥–æ –∞–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–º —á–∏–Ω–æ–º
    let mut s = String::new();
    s.push('H');
    s.push('i');
    println!("s: {}", s);

    // String –º–æ–∂–Ω–∞ –∑–∫–æ–Ω—Ñ—ñ–≥—É—Ä—É–≤–∞—Ç–∏ –∑ —Ä—è–¥–∫–æ–≤–æ–≥–æ –∑—Ä—ñ–∑—É (&str)
    // –ù–∞—Å—Ç—É–ø–Ω—ñ –¥–≤–∞ —Å–ø–æ—Å–æ–±–∏ –µ–∫–≤—ñ–≤–∞–ª–µ–Ω—Ç–Ω—ñ
    let s = "Hello".to_string();
    println!("s: {}", s);
    let s = String::from("Hello");
    println!("s: {}", s);

    // String –≤ Rust –∑–∞–≤–∂–¥–∏ –≤ –∫–æ–¥—É–≤–∞–Ω–Ω—ñ UTF-8
    let s = "Ê±âËØ≠ ÌïúÍ∏Ä √ûj√≥√∞hildur üòâ üç∫".to_string();
    println!("s: {}", s);
    
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ –æ–¥–∏–Ω –¥–æ –æ–¥–Ω–æ–≥–æ
    let mut s = "Hello ".to_string();
    s.push_str("World");

    // –Ü—Ç–µ—Ä–∞—Ü—ñ—è –Ω–∞ —Å–∏–º–≤–æ–ª–∞–º–∏, –¥–µ "—Å–∏–º–≤–æ–ª" –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è —è–∫ Unicode Scalar Value
    for ch in "Tubular".chars() {
        print!("{}.", ch);
    }
    println!();

    // –•–æ—á–∞ –±—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ "—Å–∏–º–≤–æ–ª" –Ω–µ –∑–∞–≤–∂–¥–∏ —Ç–µ, —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ –æ—á—ñ–∫—É–≤–∞—Ç–∏
    for ch in "yÃÜ".chars() {
        // –¶–µ –Ω–µ –Ω–∞–¥—Ä—É–∫—É—î yÃÜ
        print!("{} ", ch);
    }
    println!();

     for ch in "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ".chars() {
        // –¶–µ –Ω–µ –Ω–∞–¥—Ä—É–∫—É—î yÃÜ
        print!("{} ", ch);
    }
    println!();

    // –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è —Ä—è–¥–∫–∞ —Ä—ñ–∑–Ω–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏

    // –†–æ–∑–¥—ñ–ª–µ–Ω–Ω—è —Ä—è–¥–∫–∞ –ø–æ–¥—ñ–ª–æ–º –Ω–∞ –¥–≤—ñ –ø–æ–ª–æ–≤–∏–Ω–∫–∏
    let str_for_split = "HelloThere";
    let (first, second) = str_for_split.split_at(5);
    println!("first: {}, second: {}", first, second);

    // –ü–æ–¥—ñ–ª –ø–æ —ñ–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–º –ª—ñ–Ω—ñ—è–º
    let haiku = "\
        she watches\n\
        satisfied after love\n\
        he lies\n\
        looking up at nothing\n\
    ";
    for line in haiku.lines() {
        println!("\t{}.", line);
    }

    // –ü–æ–¥—ñ–ª –Ω–∞ –ø—ñ–¥—Ä—è–¥–∫–∏
    for s in "Never;Give;Up".split(';') {
        println!("{}", s);
    }
    // –ö–æ–ª–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è —Ä—è–¥–∫—É –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –Ω–∞ –ø–æ—á–∞—Ç–∫—É —á–∏ –≤ –∫—ñ–Ω—Ü—ñ, –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
    let s: Vec<_> = "::Hi::There::".split("::").collect();
    println!("{:?}", s);
    
    // –í–∏ –º–æ–∂–µ—Ç–µ —É—Å—É–Ω—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–∫–∏ –≤–∫—ñ–Ω—Ü—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ split_termitor
    let s: Vec<_> = "Mr. T.".split_terminator('.').collect();
    println!("{:?}", s);

    // char –º–∞—î –¥–µ—è–∫—ñ –º–µ—Ç–æ–¥–∏, —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è
    for s in "I'm2fast4you".split(char::is_numeric) {
        println!("{}", s);
    }

    // –†–æ–∑–¥—ñ–ª—è—î—Ç–µ —Ç—ñ–ª—å–∫–∏ –ø–µ–≤–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞–∑—ñ–≤
    for s in "It's not your fault, it's mine".splitn(3, char::is_whitespace) {
        println!("{}", s);
    }

    // Get only the substrings that match a pattern
    // This is the opposite of splitting
    for c in "The Dark Knight rises".matches(char::is_uppercase) {
        println!("{}", c);
    }

    // Check if a string starts with something
    let saying = "The early bird gets the worm";
    let starts_with_the = saying.starts_with("The");
    println!("Does \"{}\" start with \"The\"?: {}", saying, starts_with_the);
    let starts_with_bird = saying.starts_with("bird");
    println!("Does \"{}\" start with \"bird\"?: {}", saying, starts_with_bird);

    // Check if a string ends with something
    let ends_with_worm = saying.ends_with("worm");
    println!("Does \"{}\" end with \"worm\"?: {}", saying, ends_with_worm);

    // Check if the string contains something somewhere
    let contains_bird = saying.contains("bird");
    println!("Does \"{}\" contain \"bird\"?: {}", saying, contains_bird);


    // Remove whitespace

    // Splitting on whitespace might not result in what you expect
    let a_lot_of_whitespace = "    I   love spaaace     ";
    let s: Vec<_> = a_lot_of_whitespace.split(' ').collect();
    println!("{:?}", s);
    // Use split_whitespace instead
    let s: Vec<_> = a_lot_of_whitespace.split_whitespace().collect();
    println!("{:?}", s);

    // Remove leading and trailing whitespace
    let username = "   P3ngu1n\n".trim();
    println!("{}", username);
    // Remove only leading whitespace
    let username = "   P3ngu1n\n".trim_start();
    println!("{}", username);
    // Remove only trailing whitespace
    let username = "   P3ngu1n\n".trim_end();
    println!("{}", username);


    // Parse a string into another data type
    // This requires type annotation
    let num = "12".parse::<i32>();
    if let Ok(num) = num {
        println!("{} * {} = {}", num, num, num * num);
    }

    // Modify the string

    // Replace all occurences of a pattern
    let s = "My dad is the best dad";
    let new_s = s.replace("dad", "mom");
    println!("new_s: {}", new_s);

    // Replace all characters with their lowercase
    let lowercase = s.to_lowercase();
    println!("lowercase: {}", lowercase);

    // Replace all characters with their uppercase
    let uppercase = s.to_uppercase();
    println!("uppercase: {}", uppercase);

    // These also work with other languages
    let greek = "·ΩàŒîŒ•Œ£Œ£ŒïŒéŒ£";
    println!("lowercase greek: {}", greek.to_lowercase());

    // Repeat a string
    let hello = "Hello! ";
    println!("Three times hello: {}", hello.repeat(3));
}
